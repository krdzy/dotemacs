/#+TITLE: Emacs Configuration


* Startup Config
  
#+begin_src emacs-lisp
  ;; Do not autosave.
  auto-save-default nil

  ;; Press ESC to quit what you are doing instead of C-g
  ;;(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Automatically update buffers if file content on the disk has changed.
  (global-auto-revert-mode 1)
#+end_src



* Org
  configuration for org mode
  #+begin_src emacs-lisp
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  #+end_src


  
* Appearence
  
** General frame appearence
  #+begin_src emacs-lisp
    ;; disable landing page
    (setq inhibit-startup-message t)

    ;; disable toolbar
    (tool-bar-mode -1)

    ;; disable scroll bar
    ;; (toggle-scroll-bar -1) q

    ;; load theme
    (straight-use-package 'doom-themes)
    (load-theme 'doom-moonlight t)

    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
  #+end_src

** Editor
   settings for text editor appearence
   #+begin_src emacs-lisp
     (show-paren-mode 1)
     ;; show line numbers in editor
     (global-display-line-numbers-mode 1)
   #+end_src

   #+begin_src emacs-lisp
     (setq ispell-program-name "/usr/local/bin/aspell")
   #+end_src

** Font
   settings for font type, size , style...
   #+begin_src emacs-lisp
     (cond
      ((find-font (font-spec :name "FiraMono Nerd Font"))
       (set-frame-font "FiraMono Nerd Font-14"))
      ((find-font (font-spec :name "DroidSansMono Nerd Font"))
       (set-frame-font "DroidSansMono Nerd-14"))
      ((find-font (font-spec :name "SpaceMono Nerd Font"))
       (set-frame-font "Space Mono Nerd Font-14"))
      )
   #+end_src

   
   
* System Completion
  
** Vertico
   Completion framework used inside Emacs system.
#+begin_src emacs-lisp
  ;; Vertico as completion framework to use in Emacs buffers/minibufers
  (straight-use-package 'vertico)
  ;; enable vertico
  (vertico-mode 1)
  ;; enable completion history
  (savehist-mode 1)
  (setq history-length 25)

  ;; setup moving up and down on C-j and C-k keys insted of
  ;; C-n and C-p to avoid moving from homerow
  (define-key vertico-map
    (kbd "C-j") 'vertico-next)
  (define-key vertico-map
    (kbd "C-k") 'vertico-previous)
#+end_src

** Company
   In editor completion framework.
   #+begin_src emacs-lisp
     ;; set this variable to limit indent to onlt one TAB hit.
     ;; All subsequent hit will try to complete.
     (setq tab-always-indent 'complete)

     (straight-use-package 'company)
     (global-company-mode 1)

     ;; setup moving up and down on C-j and C-k keys insted of
     ;; C-n and C-p to avoid moving from homerow
     (define-key company-active-map
       (kbd "C-j") 'company-select-next-or-abort)
     (define-key company-active-map
       (kbd "C-k") 'company-select-previous-or-abort)
   #+end_src

** Orderles
   advanced completion style
   #+begin_src emacs-lisp
     (straight-use-package 'orderless)

     ;; set up for all competions except for files
     (setq completion-styles '(orderless)
	     completion-category-defaults nil
	     completion-category-overrides '((file (styles partial-completion))))

     ;; ordering for matching modes
     (setq orderless-matching-styles
	   '(orderless-literal
	     orderless-prefixes
	     orderless-initialism
	     orderless-regexp))
   #+end_src

** Marginalia
   Adds more info about files and buffers on top of Vertico minibufer
#+begin_src emacs-lisp
  ;; Adds more info about files and buffers inside Vertico minibuffer
  (straight-use-package 'marginalia)
  (marginalia-mode 1)
  (setq marginalia-annotators '(marginalia-annotators-heavy
				marginalia-annotators-light nil))
#+end_src



* System utilities
  packages to make my life with emacs easier.
  
** Which Key
   minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
  #+begin_src emacs-lisp
    (straight-use-package 'which-key)
    (setq which-key-idle-delay 0.5)
    (add-hook 'after-init-hook 'which-key-mode)
  #+end_src

** Helpful
   Helpful is an alternative to the built-in Emacs help that provides much more contextual information.
  #+begin_src emacs-lisp
    (straight-use-package 'helpful)

    ;; keybindings 
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  #+end_src
  


* Evil U+1F608
** Setup for evil mode
  #+begin_src emacs-lisp
    (straight-use-package 'evil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (evil-mode 1)
  #+end_src

** Evil colections
   #+begin_src emacs-lisp
     (straight-use-package 'evil-collection)
     (setq evil-collection-company-use-tng nil)
     (evil-collection-init)
   #+end_src 
